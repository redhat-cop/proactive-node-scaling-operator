name: push
on:
  push:
    branches:
      - master
      - main
    tags:
      - v*

env:
  DEFAULT_BUNDLE_VERSION: "0.0.1"
  DEFAULT_BUNDLE_CHANNEL: "alpha"
  DEFAULT_OPERATOR_VERSION: "latest"
  OPERATOR_SDK_VERSION: "v1.13.1"
  BUILD_PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le"
  HELM_REPO_DIR: "./tmp/gh-pages"

jobs:
  setup:
    runs-on: ubuntu-latest
    name: setup
    steps:
      - name: Check if registry secrets are set
        run: |
          if [ "${{ secrets.REGISTRY_USERNAME }}" == "" ] || [ "${{ secrets.REGISTRY_PASSWORD }}" == "" ]; then
            echo "Required Secrets 'REGISTRY_USERNAME' or 'REGISTRY_PASSWORD' are not set!"
            exit 1
          fi

      - name: Check if community operators PAT secret is set
        run: |
          if [ "${{ secrets.COMMUNITY_OPERATOR_PAT }}" == "" ]; then
            echo "Required Secret 'COMMUNITY_OPERATOR_PAT' is not set"
            exit 1
          fi

      - name: Setting Workflow Variables
        id: set-variables
        run: |
          echo "::set-output name=repository_name::$(basename $GITHUB_REPOSITORY)"
          echo "::set-output name=bin_dir::$(pwd)/bin"

          # Create Distribution Matrix
          echo "::set-output name=dist_matrix::$(echo -n "${{ env.BUILD_PLATFORMS }}" | jq -csR '. | split(",")')"

      - name: Setting Image Variables
        id: set-variables-image
        run: |
          if [ "${{ secrets.OPERATOR_IMAGE_REPOSITORY }}" == "" ]; then
            echo "::set-output name=operator_image_repository_name::${{ steps.set-variables.outputs.repository_name }}"
            echo "::set-output name=operator_image_registry::quay.io/${{ github.repository_owner }}"
          else
            OPERATOR_IMAGE_REPOSITORY="${{ secrets.OPERATOR_IMAGE_REPOSITORY }}"
            echo "::set-output name=operator_image_repository_name::${OPERATOR_IMAGE_REPOSITORY##*/}"
            echo "::set-output name=operator_image_registry::${OPERATOR_IMAGE_REPOSITORY%/*}"
          fi

          if [ "${{ secrets.BUNDLE_IMAGE_REPOSITORY }}" == "" ]; then
            echo "::set-output name=bundle_image_repository_name::${{ steps.set-variables.outputs.repository_name }}-bundle"
            echo "::set-output name=bundle_image_registry::quay.io/${{ github.repository_owner }}"

          else
            BUNDLE_IMAGE_REPOSITORY="${{ secrets.BUNDLE_IMAGE_REPOSITORY }}"
            echo "::set-output name=bundle_image_repository_name::${BUNDLE_IMAGE_REPOSITORY##*/}"
            echo "::set-output name=bundle_image_registry::${BUNDLE_IMAGE_REPOSITORY%/*}"
          fi

          # Set versions based on presence of tag
          if [[ "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            TAG="${GITHUB_REF/refs\/tags\//}"
            echo "::set-output name=tag_event::true"
            echo "::set-output name=operator_version::$TAG"
            echo "::set-output name=bundle_version::${TAG:1}"
          else
            echo "::set-output name=tag_event::false"
            echo "::set-output name=operator_version::$DEFAULT_OPERATOR_VERSION"
            echo "::set-output name=bundle_version::$DEFAULT_BUNDLE_VERSION"
          fi

      - name: Verify Semver Release
        if: ${{ steps.set-variables-image.outputs.tag_event == 'true' }}
        uses: rubenesp87/semver-validation-action@0.0.6
        with:
          version: "${{ steps.set-variables-image.outputs.bundle_version }}"

      - name: Build Go Cache Paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ^1.16

      - name: Check out code
        uses: actions/checkout@v2

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Go Dependencies
        run: go mod download

      - name: Download Binaries
        run: |
          # Create Binary Directory
          mkdir -p ${{ steps.set-variables.outputs.bin_dir }}

          # Operator SDK
          curl -L -o ${{ steps.set-variables.outputs.bin_dir }}/operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk_linux_amd64

          # Controller-gen
          make controller-gen

          # Kustomize
          make kustomize

      - name: Upload Support Binaries
        uses: actions/upload-artifact@v2
        with:
          name: support-binaries
          path: ${{ steps.set-variables.outputs.bin_dir }}
    outputs:
      repository_name: ${{ steps.set-variables.outputs.repository_name }}
      bin_dir: ${{ steps.set-variables.outputs.bin_dir }}
      operator_image_repository_name: ${{ steps.set-variables-image.outputs.operator_image_repository_name}}
      operator_image_registry: ${{ steps.set-variables-image.outputs.operator_image_registry }}
      bundle_image_repository_name: ${{ steps.set-variables-image.outputs.bundle_image_repository_name }}
      bundle_image_registry: ${{ steps.set-variables-image.outputs.bundle_image_registry }}
      go_build: ${{ steps.go-cache-paths.outputs.go-build }}
      go_mod: ${{ steps.go-cache-paths.outputs.go-mod }}
      operator_version: ${{ steps.set-variables-image.outputs.operator_version }}
      bundle_version: ${{ steps.set-variables-image.outputs.bundle_version }}
      tag_event: ${{ steps.set-variables-image.outputs.tag_event }}
      dist_matrix: ${{ steps.set-variables.outputs.dist_matrix }}

  build-operator:
    runs-on: ubuntu-latest
    name: build-operator
    needs: ["setup"]
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      OPERATOR_VERSION: ${{ needs.setup.outputs.operator_version }}
      BUNDLE_VERSION: ${{ needs.setup.outputs.bundle_version }}
      OPERATOR_IMAGE_REPOSITORY: "${{ needs.setup.outputs.operator_image_registry }}/${{ needs.setup.outputs.operator_image_repository_name }}"
      OPERATOR_IMAGE_REGISTRY: ${{ needs.setup.outputs.operator_image_registry }}
      BUNDLE_IMAGE_REPOSITORY: "${{ needs.setup.outputs.bundle_image_registry }}/${{ needs.setup.outputs.bundle_image_repository_name }}"
      BUNDLE_IMAGE_REGISTRY: ${{ needs.setup.outputs.bundle_image_registry }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ^1.16

      - name: Check out code
        uses: actions/checkout@v2

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Download Support Binaries
        uses: actions/download-artifact@v2
        with:
          name: support-binaries
          path: ${{ needs.setup.outputs.bin_dir }}

      - name: Prepare Build Step
        id: setup-build-step
        run: |
          # Setup Path
          echo "${{ needs.setup.outputs.bin_dir }}" >> $GITHUB_PATH

          # Make Binaries Executable
          chmod +x ${{ needs.setup.outputs.bin_dir }}/*

          # Configure Platform Variables
          echo "::set-output name=platform_os::$(echo ${{ matrix.platform }} |  cut -d/ -f1)"
          echo "::set-output name=platform_arch::$(echo ${{ matrix.platform }} |  cut -d/ -f2)"

      - name: Download Dependencies
        shell: bash
        run: |
          make generate
          make fmt
          make vet

      - name: build code
        shell: bash
        env:
          VERSION: latest
          GOOS: ${{ steps.setup-build-step.outputs.platform_os }}
          GOARCH: ${{ steps.setup-build-step.outputs.platform_arch }}
        run: make

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Operator Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.OPERATOR_IMAGE_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: "Build Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ci.Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: "${{ env.OPERATOR_IMAGE_REPOSITORY }}:latest,${{ env.OPERATOR_IMAGE_REPOSITORY }}:${{ env.OPERATOR_VERSION }}"

      - name: Prepare Distribution Artifacts
        shell: bash
        run: |
          # Create Distribution Directory
          mkdir dist

          # Move and Rename Manager Binary
          mv bin/manager dist/${{ env.REPOSITORY_NAME }}-manager-${{ env.OPERATOR_VERSION }}-${{ steps.setup-build-step.outputs.platform_os }}-${{ steps.setup-build-step.outputs.platform_arch }}

      - name: Upload Dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  build-bundle:
    runs-on: ubuntu-latest
    name: build-bundle
    needs: ["setup", "build-operator"]
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      OPERATOR_VERSION: ${{ needs.setup.outputs.operator_version }}
      BUNDLE_VERSION: ${{ needs.setup.outputs.bundle_version }}
      OPERATOR_IMAGE_REPOSITORY: "${{ needs.setup.outputs.operator_image_registry }}/${{ needs.setup.outputs.operator_image_repository_name }}"
      OPERATOR_IMAGE_REGISTRY: ${{ needs.setup.outputs.operator_image_registry }}
      BUNDLE_IMAGE_REPOSITORY: "${{ needs.setup.outputs.bundle_image_registry }}/${{ needs.setup.outputs.bundle_image_repository_name }}"
      BUNDLE_IMAGE_REGISTRY: ${{ needs.setup.outputs.bundle_image_registry }}
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ^1.16

      - name: Check out code
        uses: actions/checkout@v2

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Download Binaries
        uses: actions/download-artifact@v2
        with:
          name: support-binaries
          path: ${{ needs.setup.outputs.bin_dir }}

      - name: Prepare Build Step
        id: setup-build-step
        run: |
          # Setup Path
          echo "${{ needs.setup.outputs.bin_dir }}" >> $GITHUB_PATH

          # Make Binaries Executable
          chmod +x ${{ needs.setup.outputs.bin_dir }}/*

      - name: build bundle
        shell: bash
        run: make bundle IMG=${{ env.OPERATOR_IMAGE_REPOSITORY }}:${{ env.OPERATOR_VERSION }} VERSION=${{ env.BUNDLE_VERSION }} DEFAULT_CHANNEL=${{ env.DEFAULT_BUNDLE_CHANNEL }}

      - name: Process Bundle for Disconnected Support
        uses: redhat-cop/github-actions/disconnected-csv@master
        with:
          CSV_FILE: bundle/manifests/${{ env.REPOSITORY_NAME }}.clusterserviceversion.yaml
          TAGS_TO_DIGESTS: ${OPERATOR_VERSION}

      - name: "Copy bundle dockerfile"
        shell: bash
        run: sed  's/bundle\///g' bundle.Dockerfile > bundle/Dockerfile

      - name: verify bundle
        shell: bash
        run: operator-sdk bundle validate ./bundle --select-optional name=operatorhub

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Bundle Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.BUNDLE_IMAGE_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: "Build Bundle Image"
        uses: docker/build-push-action@v2
        with:
          context: .

          file: ./bundle.Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: "${{ env.BUNDLE_IMAGE_REPOSITORY }}:latest,${{ env.BUNDLE_IMAGE_REPOSITORY }}:${{ env.BUNDLE_VERSION }}"

      - name: Prepare Distribution Artifacts
        shell: bash
        run: |
          # Create Distribution Directory
          mkdir dist

          # Prepare Bundle
          cp -R bundle ${{ env.REPOSITORY_NAME }}-bundle-${{ env.OPERATOR_VERSION }}
          tar -czvf ${{ env.REPOSITORY_NAME }}-bundle-${{ env.OPERATOR_VERSION }}.tar.gz ${{ env.REPOSITORY_NAME }}-bundle-${{ env.OPERATOR_VERSION }}
          mv ${{ env.REPOSITORY_NAME }}-bundle-${{ env.OPERATOR_VERSION }}.tar.gz dist
          rm -Rf ${{ env.REPOSITORY_NAME }}-bundle-${{ env.OPERATOR_VERSION }}

      - name: Upload Dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  package-helm:
    runs-on: ubuntu-latest
    name: package-helm
    needs: ["setup"]
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      OPERATOR_VERSION: ${{ needs.setup.outputs.operator_version }}
      HELM_RELEASE_VERSION: ${{ needs.setup.outputs.bundle_version }}
      OPERATOR_IMAGE_REPOSITORY: "${{ needs.setup.outputs.operator_image_registry }}/${{ needs.setup.outputs.operator_image_repository_name }}"
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v1
        with:
          go-version: ^1.16

      - name: Check out code
        uses: actions/checkout@v2

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.go_mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Download Binaries
        uses: actions/download-artifact@v2
        with:
          name: support-binaries
          path: ${{ needs.setup.outputs.bin_dir }}

      - name: Prepare Build Step
        id: setup-build-step
        run: |
          # Setup Path
          echo "${{ needs.setup.outputs.bin_dir }}" >> $GITHUB_PATH

          # Make Binaries Executable
          chmod +x ${{ needs.setup.outputs.bin_dir }}/*

      - name: Build and Package Helm Chart
        shell: bash
        run: |
          # Render Helm Chart
          make helmchart VERSION=${{ env.HELM_RELEASE_VERSION }} IMG=${{ env.OPERATOR_IMAGE_REPOSITORY }}:${{ env.OPERATOR_VERSION }}

          # Package Helm Chart
          mkdir dist
          helm package -d dist ./charts/${{ env.REPOSITORY_NAME }}

      - name: Upload Dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  github-release:
    runs-on: ubuntu-latest
    name: github-release
    if: ${{ needs.setup.outputs.tag_event == 'true' }}
    needs: ["setup", "build-operator", "build-bundle", "package-helm"]
    env:
      OPERATOR_VERSION: ${{ needs.setup.outputs.operator_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Fetch Code
        run: |
          git fetch --prune --unshallow

      - name: Download Dist Directory
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Create Checksums for Release Artifacts
        run: for i in `ls dist/`; do sha256sum dist/$i | awk '{ print $1 }' > dist/$i.sum256; done

      - name: Generate Changelog
        run: |
          LATEST_TAG=$(git tag --sort=creatordate | sed '$!d')
          PREVIOUS_TAG=$(git tag --sort=creatordate | sed 'x;$!d')
          if [ -z "${PREVIOUS_TAG}" ]; then
            REV_RANGE=${LATEST_TAG}
          else
            REV_RANGE=${PREVIOUS_TAG}..${LATEST_TAG}
          fi
          git log --pretty=format:"- %s %H (%aN)" --no-merges ${REV_RANGE} > ${{ env.OPERATOR_VERSION }}-CHANGELOG.txt
          cat ${{ env.OPERATOR_VERSION }}-CHANGELOG.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ env.OPERATOR_VERSION }}-CHANGELOG.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release binaries
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

  helm-release:
    runs-on: ubuntu-latest
    name: helm-release
    if: ${{ needs.setup.outputs.tag_event == 'true' }}
    needs: ["setup", "build-operator", "build-bundle", "package-helm"]
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      HELM_RELEASE_VERSION: ${{ needs.setup.outputs.operator_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout gh-pages Branch
        uses: actions/checkout@v2
        with:
          path: ${{ env.HELM_REPO_DIR }}
          ref: gh-pages

      - name: Download Workspace Binaries
        uses: actions/download-artifact@v2
        with:
          name: support-binaries
          path: bin

      - name: Download Dist Directory
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Prepare Build Step
        id: setup-build-step
        run: |
          # Setup Path
          echo "${{ needs.setup.outputs.bin_dir }}" >> $GITHUB_PATH

          # Make Binaries Executable
          chmod +x ${{ needs.setup.outputs.bin_dir }}/*

      - name: Prepare Repository Update
        run: |
          cp dist/*.tgz ${{ env.HELM_REPO_DIR }}/${{ env.REPOSITORY_NAME }}/
          helm repo index --url https://${{ github.repository_owner }}.github.io/${{ env.REPOSITORY_NAME }} ${{ env.HELM_REPO_DIR }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Publish Helm Repository
        run: make helmchart-repo-push VERSION=${{ env.HELM_RELEASE_VERSION }} CHART_REPO_URL=https://${{ github.repository_owner }}.github.io/${{ env.REPOSITORY_NAME }} HELM_REPO_DEST=${{ env. HELM_REPO_DIR }}

  operatorhub-release:
    runs-on: ubuntu-latest
    name: operatorhub-release
    if: ${{ needs.setup.outputs.tag_event == 'true' }}
    needs: ["setup", "github-release", "helm-release"]
    env:
      REPOSITORY_NAME: ${{ needs.setup.outputs.repository_name }}
      OPERATOR_VERSION: ${{ needs.setup.outputs.operator_version }}
      COMMUNITY_OPERATORS_ORGANIZATION_NAME: redhat-openshift-ecosystem
      COMMUNITY_OPERATORS_REPOSITORY_NAME: community-operators-prod
      BUNDLE_VERSION: ${{ needs.setup.outputs.bundle_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Checkout Community Operators
        uses: actions/checkout@v2
        with:
          repository: ${{ env.COMMUNITY_OPERATORS_ORGANIZATION_NAME }}/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}
          path: ./tmp/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}

      - name: Set Parameters
        shell: bash
        id: set-community-operators-parameters
        run: |
          if [ ! -d "./tmp/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}/operators/${{ env.REPOSITORY_NAME }}" ]; then
            export PR_REQUEST_BODY="$(cat config/community-operators/pr-first-release-body.txt)"
          else
            export PR_REQUEST_BODY="$(cat config/community-operators/pr-body.txt)"
          fi
          PR_REQUEST_BODY="${PR_REQUEST_BODY//'%'/'%25'}"
          PR_REQUEST_BODY="${PR_REQUEST_BODY//$'\n'/'%0A'}"
          PR_REQUEST_BODY="${PR_REQUEST_BODY//$'\r'/'%0D'}"
          echo "::set-output name=pull-request-body::"$(echo $PR_REQUEST_BODY)""

      - name: Download Dist Directory
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Untar Previously Created Bundle
        shell: bash
        run: |
          # Create Bundle Directory
          mkdir bundle

          # Untar
          ls dist/${{ env.REPOSITORY_NAME }}-bundle*.tar.gz | xargs -n1 tar -C bundle/ --strip-components=1 -xzvf

      - name: Create and Copy Bundle to Community Operators
        shell: bash
        run: |
          sed -i '/replaces: '"${{ env.REPOSITORY_NAME }}"'/d' ./bundle/manifests/${{ env.REPOSITORY_NAME }}.clusterserviceversion.yaml
          mkdir -p ./tmp/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}/operators/${{ env.REPOSITORY_NAME }}/${{ env.BUNDLE_VERSION }}
          /bin/cp -v -R ./bundle/* ./tmp/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}/operators/${{ env.REPOSITORY_NAME }}/${{ env.BUNDLE_VERSION }}
          /bin/cp -v -R ./config/community-operators/ci.yaml ./tmp/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}/operators/${{ env.REPOSITORY_NAME }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        env:
          PR_ACTOR: raffaele.spazzoli@gmail.com
        with:
          path: ./tmp/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}
          commit-message: ${{ env.REPOSITORY_NAME }} release ${{ env.BUNDLE_VERSION }}
          committer: ${{ github.actor }} <${{ env.PR_ACTOR }}>
          author: ${{ github.actor }} <${{ env.PR_ACTOR }}>
          signoff: true
          branch: ${{ env.REPOSITORY_NAME }}-${{ env.BUNDLE_VERSION }}
          delete-branch: true
          push-to-fork: ${{ github.repository_owner }}/${{ env.COMMUNITY_OPERATORS_REPOSITORY_NAME }}
          title: ${{ env.REPOSITORY_NAME }} new version ${{ env.BUNDLE_VERSION }}
          body: |
            ${{ steps.set-community-operators-parameters.outputs.pull-request-body }}
          token: ${{ secrets.COMMUNITY_OPERATOR_PAT }}
